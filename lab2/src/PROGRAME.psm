;**************************************************************************************
; Useful data constants
;**************************************************************************************

; Constant to define a software delay of 1us. This must be adjusted to reflect the
; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
; calculation highly predictable. The '6' in the following equation even allows for
; 'CALL delay_1us' instruction in the initiating code.
;
; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
;
; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
; For clock rates below 10MHz the value of 1 must be used and the operation will
; become lower than intended. Interrupts may effect the timing of software based
; delays.

    CONSTANT delay_1us_constant, 0B

    CONSTANT PORT_A, 01
    CONSTANT PORT_B, 02
    CONSTANT PORT_C, 04

;**************************************************************************************
; Main function
;**************************************************************************************

; Initialize registers used in main & ISR

    main: LOAD   s6, 00 ; Filtering counter
          LOAD   s7, 00 ; Filtering LSBs register
          LOAD   s8, 00 ; Filtering MSBs register
          ENABLE INTERRUPT
          LOAD   s5, 00 ; LED register
    
; Toggles an LED every second
; Register used: s5

    toggle_led: XOR s5, 01
                OUTPUT s5, PORT_A
                CALL delay_1s
                JUMP toggle_led

;**************************************************************************************
; Software delay routines
;**************************************************************************************

; Delay of 1us
; Registers used: s0
    
    delay_1us: LOAD s0, delay_1us_constant
     wait_1us: SUB s0, 01
               JUMP NZ, wait_1us
               RETURN
                    
; Delay of 40us
; Registers used: s0, s1
        
    delay_40us: LOAD s1, 28                        ; 40 x 1us = 40us
     wait_40us: CALL delay_1us
                SUB s1, 01
                JUMP NZ, wait_40us
                RETURN
                
; Delay of 1ms
; Registers used: s0, s1, s2

    delay_1ms: LOAD s2, 19                         ; 25 x 40us = 1ms
     wait_1ms: CALL delay_40us
               SUB s2, 01
               JUMP NZ, wait_1ms
               RETURN

; Delay of 20ms
; Registers used: s0, s1, s2, s3
                
    delay_20ms: LOAD s3, 14                        ; 20 x 1ms = 20ms
     wait_20ms: CALL delay_1ms
                SUB s3, 01
                JUMP NZ, wait_20ms
                RETURN

; Delay of approximately 1 second
; Registers used: s0, s1, s2, s3, s4

    delay_1s: LOAD s4, 32                         ; 50 x 20ms = 1000ms
     wait_1s: CALL delay_20ms
              SUB s4, 01
              JUMP NZ, wait_1s
              RETURN

;**************************************************************************************
; Interrupt Service Routine (ISR)
;**************************************************************************************

; Outputs a byte-sized strength meter
; Registers used: s6, s7, s8, s9

            ISR: INPUT s9, PORT_B    ; Read in audio data
                 TEST s9, 80         ; Check if MSB of audio data is 0
                 JUMP Z, skip_norm   ; If true, number is positive and no need to normalize 
 
                 SUB s9, 01          ; Normalize: subtract 1
                 XOR s9, FF          ; Normalize: compliment bits

      skip_norm: ADD s7, s9          ; Add audio data to LSBs register
                 ADDCY s8, 00        ; If there is overflow (i.e. carry bit is set), increment MSBs register
                 ADD s6, 01          ; Increment the sum counter
                 JUMP NC, skip_calc  ; If 256 vals have not yet been summed, then carry bit not set and no need to take the average

     count_ones: ADD s6, 01          ; Increment the shift counter
                 SR0 s8              ; Shift the average value
                 JUMP NZ, count_ones ; If the whole number has not yet been shifted, keep shifting

     shift_ones: SR1 s8              ; Insert a one in the MSB
                 SUB s6, 01          ; Decrement the shift counter
                 JUMP NZ, shift_ones ; If the counter is non-zero, keep shifting

                 OUTPUT s8, PORT_C
                 LOAD s6, 00
                 LOAD s7, 00
                 LOAD s8, 00

      skip_calc: RETURNI ENABLE

;**************************************************************************************
; Interrupt Vector
;**************************************************************************************

    ADDRESS 3FF
    JUMP ISR